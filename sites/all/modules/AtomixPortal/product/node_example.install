<?php

function node_example_install() {
  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();

  // We define the node type as an associative array.
  $node_example = array(
    'type' => 'node_example',
    'name' => $t('Product'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('This is a product type node type with a few fields.'),
    'body_label' => $t('Product Description'),
    'custom' => TRUE,
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($node_example);
  //node_add_body_field($content_type);

  // Save the content type
  node_type_save($content_type);


  // Load the instance definition for our content type's body
  // http://api.drupal.org/api/function/field_info_instance/7
 // $body_instance = field_info_instance('node', 'body', 'node_example');

  // Add our example_node_list view mode to the body instance display by
  // instructing the body to display as a summary
 // $body_instance['display']['example_node_list'] = array(
  //  'label' => 'hidden',
  //  'type' => 'text_summary_or_trimmed',
 // );

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  //field_update_instance($body_instance);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_node_example_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_node_example_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $node_example['type'];
    field_create_instance($instance);
  }
}

/**
 * Implements hook_uninstall().
 *
 * This hook is called when the user not only has disabled the module,
 * but also uninstalls it from the 'uninstall' tab in the module page.
 *
 * So it's a perfect time to remove our fields and instances and new
 * node type from the database.
 *
 * @ingroup node_example
 */
function node_example_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'node_example'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_node_example_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the node_example
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'node_example');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('node_example');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * node_example_install() and node_example_uninstall().
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 *
 * @ingroup node_example
 */
function _node_example_installed_fields() {
  $t = get_t();
  return array(
      'field__name' => array(
      'field_name' => 'field__name',
      'cardinality' => 1,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 60,
      ),
    ),
    
    
    'field__visible' => array(
      'field_name' => 'field__visible',
      'type'       => 'list_boolean',
	'settings' =>array(
      'allowed_values'=>array(
      0 => '0',
      1 => '1',
	),),
      'cardinality' => 1,
      
    ),
    
    'field__description' => array(
      'field_name'  => 'field__description',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    
    
    'field__image' => array(
      'field_name' => 'field__image',
      'cardinality' => 1,
       'type'       => 'image',
     
    ),
    
    'field__metadata' => array(
      'field_name' => 'field__metadata',
      'type'       => 'table',
      'cardinality' => 1,
    ),    
        
    'field___reporttype' => array(
      'field_name' => 'field__reporttype',
      'type'       => 'list_text',
      'cardinality' => 1,
      'settings' =>array(
      'allowed_values'=>array(
      'XML' => 'XML report',
      'MASK'=>'PDF report, problems highlighted by transparent masks',
      'COMMENT'=>'PDF report, problems highlighted by annotations',
      'LAYER'=>'PDF report, problems separated on layers',
      'INVENTORY'=>'PDF report which lists all resources used in the PDF file',
      'COMPARE'=>'PDF compare reports',
      ),),
    ),
    
    'field__lowrespdf' => array(
      'field_name' => 'field__lowrespdf',
      'type'       => 'list_boolean',
'settings' =>array(
      'allowed_values'=>array(
      0 => '0',
      1 => '1',
	),),
      'cardinality' => 1,
    ),
    
    'field__profile' => array(
      'field_name' => 'field__profile',
      'type'       => 'file',
      'settings' => array(
	'allowed_values' => array(
	0 => '0',
	1 => '1', ),

	),
      'cardinality' => 1,
    ),
    
    'field__lowpreflight' => array(
      'field_name' => 'field__lowpreflight',
      'type'       => 'file',
      'cardinality' => 1,
    ),
    
    'field__allow_pdf_fix' => array(
      'field_name' => 'field__allow_pdf_fix',
      'type'       => 'list_boolean',
'settings' =>array(
      'allowed_values'=>array(
      0 => '0',
      1 => '1',
	),),
      'cardinality' => 1,
    ),
   
    
    'field__num_of_pages' => array(
      'field_name' => 'field__num_of_pages',
      'type'       => 'list_text',
	'settings' =>array(
      'allowed_values'=>array(
      '1' => '1',
      '2'=>'2',
      '5'=>'5',
      '10'=>'10',
           ),),
      'cardinality' => 1,
    ),
    
    'field__regular' => array(
      'field_name' => 'field__regular',
      'type'       => 'text',
      'cardinality' => 1,
    ),
    
  );
}


/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "field_example_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is factored into this function so it can be used in both
 * field_example_install() and field_example_uninstall().
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  field type.
 *
 * @ingroup field_example
 */
function _node_example_installed_instances() {
  $t = get_t();
  return array(    
     'field__name' => array(
      'field_name' => 'field__name',
      'label'       => $t('Product name:'),
      'required' => TRUE,
      'widget'      => array(
        'type'    => 'text_textnode',
      ),
      'display' => array(
        'example_node_list' => array(
          'label' => 'above',
          'type' => 'text',
        ),
      ),
	
    ),
   
    'field__visible' => array(
      'field_name' => 'field__visible',
     'label'       => $t('Visible'),
      'widget'      => array(
        'type'    => 'options_onoff',
	'settings'=> array(
	'display_label' =>1,
	),
      ),
      'display' => array(
       'example_node_list' => array(
          'label' => 'above',
          'type' => 'list_default',
          
        ),
	
      ),
    ),
    
    'field__description' => array(
      'field_name'  => 'field__description',
       'label'      => $t('Description'),
	'required' => TRUE,
      'widget'      => array(
        'type'      => 'text',
      ),
      'display' => array(
       'example_node_list' => array(
          'label' => 'above',
          'type' => 'text',
        ),
      ),
    ),
    
    'field__image' => array(
      'field_name' => 'field__image',
      'label'       => $t('Product logo'),
	'required' => TRUE,
      'widget'      => array(
        'type'    => 'image_image',
      ),
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden',
          'type' => 'image_link_content__thumbnail',
        ),
      ),
    ),   
    
    'field__metadata' => array(
      'field_name' => 'field__metadata',
      'label'       => $t('Metadata (5 columns required)'),
	'required' => TRUE,
      'widget'      => array(
        'type'    => 'cck_table_textarea',
        'settings' => array(
        'rows' =>5,
        'separator' =>'|',
        'enforce_misalign_col' =>1,
        ),
        
      ),
      'display' => array(
       'example_node_list' => array(
          'label' => 'above',
          'type' => 'without_header',
        ),
      ),
    ),
    
       
    'field__reporttype' => array(
      'field_name' => 'field__reporttype',
      'label'       => $t('Report type.'),
	'required' => TRUE,
      'widget'      => array(
        'type'    => 'options_select',
      ),
      'display' => array(
      'example_node_list' => array(
          'label' => 'above',
          'type' => 'list_default',
        ),
      ),
    ),
    
    'field__lowrespdf' => array(
      'field_name' => 'field__lowrespdf',
      'label'       => $t('Low resolution pdf'),
	'widget'      => array(
        'type'    => 'options_onoff',
         'settings'=> array(
	'display_label' =>1,
	),
      ),
      'display' => array(
       'example_node_list' => array(
          'label' => 'above',
          'type' => 'list_default',
          
        ),
      ),
    ),
    'field__profile' => array(
      'field_name' => 'field__profile',
      'label'       => $t('Profile'),
	'required' => TRUE,
      'widget'      => array(
        'type'    => 'file_generic',
      ),

      'settings'=> array(
	'file_directory' => '',
	  'file_extensions' =>'kfpx',
	  'max_filesize' => '200MB',
      ),
      'display' => array(
      'example_node_list' => array(
          'label' => 'above',
          'type' => 'file_default',
        ),
      ),
    ),
    
    'field__lowpreflight' => array(
      'field_name' => 'field__lowpreflight',
	'label'       => $t('Lowpreflight kfpx'),
	'widget'      => array(
        'type'    => 'file_generic',
      ),
      'settings'=> array(
	'file_directory' => '',
	  'file_extensions' =>'kfpx',
	  'max_filesize' => '200MB',
      ),
	'display' => array(
        'example_node_list' => array(
          'label' => 'above',
          'type' => 'file_default',
        ),
      ),
    ),
    
    'field__allow_pdf_fix' => array(
      'field_name' => 'field__allow_pdf_fix',
     'label'       => $t('Allow pdf file fixing'),
	'widget'      => array(
        'type'    => 'options_onoff',
      'settings'=> array(
	'display_label' =>1,
	),
      ),
      'display' => array(
       'example_node_list' => array(
          'label' => 'above',
          'type' => 'list_default',
          
        ),
      ),
    ),
   
    
    'field__num_of_pages' => array(
      'field_name' => 'field__num_of_pages',
       'label'       => $t('Number of pages'),
	'widget'      => array(
        'type'    => 'options_select',
      ),
      'display' => array(
       'example_node_list' => array(
          'label' => 'above',
          'type' => 'list_default',
        ),
      ),
    ),
    
    'field__regular' => array(
      'field_name' => 'field__regular',
     'label'       => $t('Regular expression for job files upload'),
	'required' => TRUE,
      'widget'      => array(
        'type'    => 'text_textnode',
      ),
      'display' => array(
        'example_node_list' => array(
          'label' => 'above',
          'type' => 'text_default',
        ),
      ),
    ),
    
  );
}
